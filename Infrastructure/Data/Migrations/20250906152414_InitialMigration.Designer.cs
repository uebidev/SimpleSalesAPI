// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleSalesAPI.Infrastructure.Data.Context;

#nullable disable

namespace SimpleSalesAPI.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250906152414_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_Categorias_Nome");

                    b.ToTable("Categorias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Smartphones, tablets, notebooks e acessórios tecnológicos",
                            Nome = "Eletrônicos"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Roupas, calçados e acessórios de moda",
                            Nome = "Vestuário"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Livros, e-books, filmes e materiais educativos",
                            Nome = "Livros e Mídia"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Móveis, decoração e utensílios domésticos",
                            Nome = "Casa e Decoração"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Equipamentos esportivos e suplementos",
                            Nome = "Esportes e Fitness"
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "Cosméticos, perfumes e produtos de higiene",
                            Nome = "Beleza e Cuidados"
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "Alimentos, bebidas e produtos gourmet",
                            Nome = "Alimentação"
                        },
                        new
                        {
                            Id = 8,
                            Descricao = "Peças, acessórios e ferramentas automotivas",
                            Nome = "Automotivo"
                        });
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Clientes_Email");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Clientes_Nome");

                    b.ToTable("Clientes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ana.carolina@gmail.com",
                            Endereco = "Rua das Flores, 234 - Vila Madalena, São Paulo - SP",
                            Nome = "Ana Carolina Silva",
                            Telefone = "(11) 98765-4321"
                        },
                        new
                        {
                            Id = 2,
                            Email = "carlos.eduardo@hotmail.com",
                            Endereco = "Avenida Atlântica, 1500 - Copacabana, Rio de Janeiro - RJ",
                            Nome = "Carlos Eduardo Santos",
                            Telefone = "(21) 97654-3210"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mariajose@outlook.com",
                            Endereco = "Rua da Liberdade, 789 - Centro, Belo Horizonte - MG",
                            Nome = "Maria José Oliveira",
                            Telefone = "(31) 99876-5432"
                        },
                        new
                        {
                            Id = 4,
                            Email = "joaopedro@yahoo.com.br",
                            Endereco = "Rua XV de Novembro, 456 - Centro, Blumenau - SC",
                            Nome = "João Pedro Rodrigues",
                            Telefone = "(47) 98123-4567"
                        },
                        new
                        {
                            Id = 5,
                            Email = "fernanda.lima@gmail.com",
                            Endereco = "Avenida Beira Mar, 2100 - Meireles, Fortaleza - CE",
                            Nome = "Fernanda Costa Lima",
                            Telefone = "(85) 97456-1234"
                        },
                        new
                        {
                            Id = 6,
                            Email = "ricardo.almeida@uol.com.br",
                            Endereco = "SQN 308, Bloco A - Asa Norte, Brasília - DF",
                            Nome = "Ricardo Almeida Pereira",
                            Telefone = "(61) 99345-6789"
                        },
                        new
                        {
                            Id = 7,
                            Email = "juliana.ferreira@terra.com.br",
                            Endereco = "Rua da Praia, 1200 - Centro Histórico, Porto Alegre - RS",
                            Nome = "Juliana Ferreira Martins",
                            Telefone = "(51) 98567-2341"
                        },
                        new
                        {
                            Id = 8,
                            Email = "gabriel.souza@gmail.com",
                            Endereco = "Avenida T-4, 890 - Setor Bueno, Goiânia - GO",
                            Nome = "Gabriel Henrique Souza",
                            Telefone = "(62) 97234-5678"
                        });
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.ItemVenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PrecoUnitario")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("VendaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId")
                        .HasDatabaseName("IX_ItensVenda_Produto");

                    b.HasIndex("VendaId")
                        .HasDatabaseName("IX_ItensVenda_Venda");

                    b.HasIndex("VendaId", "ProdutoId")
                        .IsUnique()
                        .HasDatabaseName("IX_ItensVenda_Venda_Produto");

                    b.ToTable("ItensVenda", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PrecoUnitario = 7499.99m,
                            ProdutoId = 1,
                            Quantidade = 1,
                            VendaId = 1
                        },
                        new
                        {
                            Id = 2,
                            PrecoUnitario = 129.99m,
                            ProdutoId = 5,
                            Quantidade = 1,
                            VendaId = 1
                        },
                        new
                        {
                            Id = 3,
                            PrecoUnitario = 129.99m,
                            ProdutoId = 5,
                            Quantidade = 2,
                            VendaId = 2
                        },
                        new
                        {
                            Id = 4,
                            PrecoUnitario = 2899.99m,
                            ProdutoId = 3,
                            Quantidade = 1,
                            VendaId = 3
                        },
                        new
                        {
                            Id = 5,
                            PrecoUnitario = 1299.99m,
                            ProdutoId = 10,
                            Quantidade = 1,
                            VendaId = 4
                        },
                        new
                        {
                            Id = 6,
                            PrecoUnitario = 189.99m,
                            ProdutoId = 13,
                            Quantidade = 1,
                            VendaId = 4
                        },
                        new
                        {
                            Id = 7,
                            PrecoUnitario = 32.99m,
                            ProdutoId = 16,
                            Quantidade = 2,
                            VendaId = 4
                        });
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("EstoqueAtual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Preco")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Ativo")
                        .HasDatabaseName("IX_Produtos_Ativo");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("IX_Produtos_Categoria");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_Produtos_Nome");

                    b.HasIndex("CategoriaId", "Ativo")
                        .HasDatabaseName("IX_Produtos_Categoria_Ativo");

                    b.ToTable("Produtos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Smartphone Apple iPhone 15 com 128GB de armazenamento, câmera de 48MP e chip A16 Bionic",
                            EstoqueAtual = 25,
                            Nome = "iPhone 15 128GB",
                            Preco = 7499.99m
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Smartphone Samsung Galaxy S24 com 256GB, tela Dynamic AMOLED e câmera tripla de 50MP",
                            EstoqueAtual = 40,
                            Nome = "Samsung Galaxy S24 256GB",
                            Preco = 4999.99m
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Notebook Dell Inspiron 15.6\", Intel Core i5, 8GB RAM, SSD 256GB, Windows 11",
                            EstoqueAtual = 15,
                            Nome = "Notebook Dell Inspiron 15",
                            Preco = 2899.99m
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            CategoriaId = 1,
                            Descricao = "Tablet Apple iPad Air com chip M1, tela Liquid Retina de 10.9\", 64GB Wi-Fi",
                            EstoqueAtual = 20,
                            Nome = "iPad Air 5ª Geração",
                            Preco = 4199.99m
                        },
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Camiseta esportiva Nike Dri-FIT, tecido respirável, disponível em várias cores",
                            EstoqueAtual = 150,
                            Nome = "Camiseta Nike Dri-FIT",
                            Preco = 129.99m
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Calça jeans Levi's 501 Original Fit, 100% algodão, corte clássico",
                            EstoqueAtual = 80,
                            Nome = "Jeans Levi's 501 Original",
                            Preco = 349.99m
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            CategoriaId = 2,
                            Descricao = "Tênis de corrida Adidas Ultraboost 22, tecnologia BOOST, máximo conforto",
                            EstoqueAtual = 60,
                            Nome = "Tênis Adidas Ultraboost 22",
                            Preco = 899.99m
                        },
                        new
                        {
                            Id = 8,
                            Ativo = true,
                            CategoriaId = 3,
                            Descricao = "Livro sobre práticas de programação limpa e desenvolvimento de software profissional",
                            EstoqueAtual = 45,
                            Nome = "Clean Code - Robert C. Martin",
                            Preco = 89.99m
                        },
                        new
                        {
                            Id = 9,
                            Ativo = true,
                            CategoriaId = 3,
                            Descricao = "Guia essencial para desenvolvimento de software, de David Thomas e Andrew Hunt",
                            EstoqueAtual = 30,
                            Nome = "O Programador Pragmático",
                            Preco = 75.99m
                        },
                        new
                        {
                            Id = 10,
                            Ativo = true,
                            CategoriaId = 4,
                            Descricao = "Cadeira ergonômica para escritório, regulagem de altura, apoio lombar, suporte para braços",
                            EstoqueAtual = 12,
                            Nome = "Cadeira de Escritório Ergonômica",
                            Preco = 1299.99m
                        },
                        new
                        {
                            Id = 11,
                            Ativo = true,
                            CategoriaId = 4,
                            Descricao = "Mesa de centro em madeira maciça, design moderno, 120x60cm",
                            EstoqueAtual = 8,
                            Nome = "Mesa de Centro Madeira Maciça",
                            Preco = 899.99m
                        },
                        new
                        {
                            Id = 12,
                            Ativo = true,
                            CategoriaId = 5,
                            Descricao = "Par de halteres ajustáveis de 5 a 20kg cada, ideais para treino em casa",
                            EstoqueAtual = 25,
                            Nome = "Halteres Ajustáveis 20kg",
                            Preco = 459.99m
                        },
                        new
                        {
                            Id = 13,
                            Ativo = true,
                            CategoriaId = 5,
                            Descricao = "Suplemento Whey Protein Isolado, sabor chocolate, 1kg, alta pureza",
                            EstoqueAtual = 100,
                            Nome = "Whey Protein Isolado 1kg",
                            Preco = 189.99m
                        },
                        new
                        {
                            Id = 14,
                            Ativo = true,
                            CategoriaId = 6,
                            Descricao = "Perfume feminino Natura Humor, fragrância floral frutal, 75ml",
                            EstoqueAtual = 70,
                            Nome = "Perfume Natura Humor",
                            Preco = 159.99m
                        },
                        new
                        {
                            Id = 15,
                            Ativo = true,
                            CategoriaId = 6,
                            Descricao = "Shampoo L'Oréal Elseve reparação total 5, 400ml",
                            EstoqueAtual = 200,
                            Nome = "Shampoo L'Oréal Elseve",
                            Preco = 24.99m
                        },
                        new
                        {
                            Id = 16,
                            Ativo = true,
                            CategoriaId = 7,
                            Descricao = "Café torrado e moído especial, torra média, embalagem 500g",
                            EstoqueAtual = 120,
                            Nome = "Café Especial Pilão Gourmet",
                            Preco = 32.99m
                        },
                        new
                        {
                            Id = 17,
                            Ativo = true,
                            CategoriaId = 7,
                            Descricao = "Polpa de açaí premium congelada, sem açúcar, embalagem 1kg",
                            EstoqueAtual = 80,
                            Nome = "Açaí Premium Congelado 1kg",
                            Preco = 28.99m
                        },
                        new
                        {
                            Id = 18,
                            Ativo = true,
                            CategoriaId = 8,
                            Descricao = "Óleo lubrificante para motor Castrol GTX 5W-30, embalagem 4 litros",
                            EstoqueAtual = 50,
                            Nome = "Óleo Motor Castrol GTX 5W30",
                            Preco = 89.99m
                        },
                        new
                        {
                            Id = 19,
                            Ativo = true,
                            CategoriaId = 8,
                            Descricao = "Pneu para carro de passeio Michelin Primacy 4, medida 205/55 R16",
                            EstoqueAtual = 30,
                            Nome = "Pneu Michelin Primacy 4",
                            Preco = 679.99m
                        },
                        new
                        {
                            Id = 20,
                            Ativo = false,
                            CategoriaId = 1,
                            Descricao = "Smartphone Xiaomi Mi 11 Lite 5G, 128GB, câmera tripla 64MP - DESCONTINUADO",
                            EstoqueAtual = 5,
                            Nome = "Smartphone Xiaomi Mi 11 Lite",
                            Preco = 1899.99m
                        });
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("ValorTotal")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasDefaultValue(0.00m);

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("IX_Vendas_Cliente");

                    b.HasIndex("DataVenda")
                        .HasDatabaseName("IX_Vendas_Data");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Vendas_Status");

                    b.HasIndex("DataVenda", "Status")
                        .HasDatabaseName("IX_Vendas_Data_Status");

                    b.ToTable("Vendas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            DataVenda = new DateTime(2024, 8, 15, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = "Entregue",
                            ValorTotal = 7629.98m
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 2,
                            DataVenda = new DateTime(2024, 8, 20, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            Status = "Entregue",
                            ValorTotal = 259.98m
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 3,
                            DataVenda = new DateTime(2024, 9, 1, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmada",
                            ValorTotal = 2899.99m
                        },
                        new
                        {
                            Id = 4,
                            ClienteId = 4,
                            DataVenda = new DateTime(2024, 9, 5, 9, 20, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pendente",
                            ValorTotal = 1549.98m
                        });
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.ItemVenda", b =>
                {
                    b.HasOne("SimpleSalesAPI.Domain.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ItensVenda_Produto");

                    b.HasOne("SimpleSalesAPI.Domain.Models.Venda", "Venda")
                        .WithMany("Itens")
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ItensVenda_Venda");

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Produto", b =>
                {
                    b.HasOne("SimpleSalesAPI.Domain.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Produtos_Categoria");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Venda", b =>
                {
                    b.HasOne("SimpleSalesAPI.Domain.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Vendas_Cliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("SimpleSalesAPI.Domain.Models.Venda", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
